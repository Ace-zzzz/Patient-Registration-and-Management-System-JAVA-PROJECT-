/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.patient_login;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;

/**
 * This class represents the Admin Dashboard window. It handles the UI elements
 * and functionality for the admin to view and manage patient information.
 *
 * @author escob
 */
public class AdminDashboard extends javax.swing.JFrame {

    /**
     * Creates new form AdminDashboard
     */
    public AdminDashboard() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginAs = new javax.swing.JPanel();
        backBtn = new javax.swing.JLabel();
        exitBtn = new javax.swing.JLabel();
        allPatient = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patient_tbl = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        loginAs.setBackground(new java.awt.Color(253, 254, 254));

        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/patient_login/Icons/back.png"))); // NOI18N
        backBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        backBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backBtnMouseClicked(evt);
            }
        });

        exitBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/patient_login/Icons/exit.png"))); // NOI18N
        exitBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        exitBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitBtnMouseClicked(evt);
            }
        });

        allPatient.setBackground(new java.awt.Color(253, 254, 254));
        allPatient.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        allPatient.setText("Show All Patients");
        allPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allPatientActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/patient_login/Icons/adminPatient.png"))); // NOI18N

        patient_tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient ID", "First Name", "LastName", "Email", "Phone No.", "Address", "Birthday", "Username", "Password", "Doctor ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        patient_tbl.setToolTipText("");
        jScrollPane1.setViewportView(patient_tbl);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/patient_login/Icons/update.png"))); // NOI18N
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/patient_login/Icons/delete.png"))); // NOI18N
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 48)); // NOI18N
        jLabel4.setText("WELCOME ADMIN");

        javax.swing.GroupLayout loginAsLayout = new javax.swing.GroupLayout(loginAs);
        loginAs.setLayout(loginAsLayout);
        loginAsLayout.setHorizontalGroup(
            loginAsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginAsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exitBtn)
                .addContainerGap())
            .addGroup(loginAsLayout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(loginAsLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(jLabel3)
                .addGap(51, 51, 51)
                .addGroup(loginAsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginAsLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(loginAsLayout.createSequentialGroup()
                        .addComponent(allPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(124, 124, 124)
                        .addComponent(jLabel2)
                        .addGap(145, 145, 145))))
        );
        loginAsLayout.setVerticalGroup(
            loginAsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginAsLayout.createSequentialGroup()
                .addGroup(loginAsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginAsLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(loginAsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(exitBtn)
                            .addComponent(backBtn)))
                    .addGroup(loginAsLayout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(jLabel4)
                        .addGap(118, 118, 118)
                        .addGroup(loginAsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(allPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(217, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(loginAs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loginAs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backBtnMouseClicked
        // TODO add your handling code here:
        new Login().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backBtnMouseClicked

    private void exitBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitBtnMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitBtnMouseClicked

    private void allPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allPatientActionPerformed
        // TODO add your handling code here:
        Connection connection = null;

        try
        {
            connection = DriverManager.getConnection(
                "jdbc:mysql://127.0.0.1:3306/patient_accountDB",
                "root", // Username
                "admin123" // Password
            );
        }
        catch (SQLException e)
        {
            System.out.println(e.getMessage());
        }

        try {

            DefaultTableModel tblPatient = (DefaultTableModel) patient_tbl.getModel();
            tblPatient.setRowCount(0);

            String sql = "select * from patient_tbl;";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            ResultSet resultSet = preparedStatement.executeQuery();

            tblPatient = (DefaultTableModel) patient_tbl.getModel();

            while (resultSet.next()) {
                String license_id = resultSet.getString("Patient_ID");
                String firstName = resultSet.getString("FirstName");
                String lastName = resultSet.getString("LastName");
                String email = resultSet.getString("Email");
                String phone = resultSet.getString("Contact_No");
                String address = resultSet.getString("Address");
                String birthday = resultSet.getString("Birthday");
                String username = resultSet.getString("userName");
                String password = resultSet.getString("Password");

                String[] patientData = {license_id, firstName, lastName, email, phone, address, birthday, username, password};
                tblPatient.addRow(patientData);
            }

            resultSet.close();
            preparedStatement.close();

        } catch (SQLException e) {
            System.out.println("SQLException: " + e.getMessage());
        }
    }//GEN-LAST:event_allPatientActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        Connection connection = null;

        try {
            connection = DriverManager.getConnection(
                    "jdbc:mysql://127.0.0.1:3306/patient_accountDB", 
                    "root", // Username
                    "admin123" // Password
            );

            // Get the selected row index
            int selectedRowIndex = patient_tbl.getSelectedRow();

            if (selectedRowIndex == -1) {
                System.out.println("Please select a row to update.");
                return;
            }

            // Get data from the selected row
            DefaultTableModel tblPatient = (DefaultTableModel) patient_tbl.getModel();
            String IDToUpdate = tblPatient.getValueAt(selectedRowIndex, 0).toString(); // Assuming License is in the first column
            String updatedFirstName = tblPatient.getValueAt(selectedRowIndex, 1).toString();
            String updatedLastName = tblPatient.getValueAt(selectedRowIndex, 2).toString();
            String updatedEmail = tblPatient.getValueAt(selectedRowIndex, 3).toString();
            String updatedPhone = tblPatient.getValueAt(selectedRowIndex, 4).toString();
            String updatedAddress = tblPatient.getValueAt(selectedRowIndex, 5).toString();
            String updatedBirthday = tblPatient.getValueAt(selectedRowIndex, 6).toString();
            String updateUsername  = tblPatient.getValueAt(selectedRowIndex, 7).toString();
            String updatedPassword = tblPatient.getValueAt(selectedRowIndex, 8).toString();

            // Construct the SQL update statement
            String sql = "UPDATE patient_tbl SET Patient_ID = ?, FirstName=?, LastName=?, Email=?, "
                            + "Contact_No=?, Address=?, Birthday=?, userName=?, Password=? WHERE Patient_ID=?";


            // Create a PreparedStatement for the update query
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            // Set parameters for the PreparedStatement
            preparedStatement.setString(1, IDToUpdate); // Patient_ID
            preparedStatement.setString(2, updatedFirstName); // FirstName
            preparedStatement.setString(3, updatedLastName); // LastName
            preparedStatement.setString(4, updatedEmail); // Email
            preparedStatement.setString(5, updatedPhone); // Contact_No
            preparedStatement.setString(6, updatedAddress); // Address
            preparedStatement.setString(7, updatedBirthday); // Birthday
            preparedStatement.setString(8, updateUsername); // userName
            preparedStatement.setString(9, updatedPassword); // Password
            preparedStatement.setString(10, IDToUpdate); // This sets the WHERE condition for Patient_ID

            // Execute the update
            int rowsAffected = preparedStatement.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Update successful!");
            } else {
                System.out.println("Update failed or no records matched the condition.");
            }

            preparedStatement.close();

        } catch (SQLException e) {
            System.out.println("SQLException: " + e.getMessage());
        } finally {
            try {
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException ex) {
                System.out.println("Error closing connection: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        Connection connection = null;

        try {
            connection = DriverManager.getConnection(
                    "jdbc:mysql://127.0.0.1:3306/patient_accountDB", 
                    "root", // Username
                    "admin123" // Password
            );

            // Get the selected row index
            int selectedRowIndex = patient_tbl.getSelectedRow();

            if (selectedRowIndex == -1) {
                System.out.println("Please select a row to delete.");
                return;
            }

            // Get data from the selected row
            DefaultTableModel tblPatient = (DefaultTableModel) patient_tbl.getModel();
            String licenseToDelete = tblPatient.getValueAt(selectedRowIndex, 0).toString(); // Assuming License is in the first column

            // Construct the SQL delete statement
            String sql = "DELETE FROM patient_tbl WHERE Patient_ID=?";

            // Create a PreparedStatement for the delete query
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            // Set parameter for the PreparedStatement
            preparedStatement.setString(1, licenseToDelete); // Set the condition value

            // Execute the delete
            int rowsAffected = preparedStatement.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Delete successful!");
                // Remove the row from the table model
                tblPatient.removeRow(selectedRowIndex);
            } else {
                System.out.println("Delete failed or no records matched the condition.");
            }

            preparedStatement.close();

        } catch (SQLException e) {
            System.out.println("SQLException: " + e.getMessage());
        } finally {
            try {
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException ex) {
                System.out.println("Error closing connection: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_jLabel2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allPatient;
    private javax.swing.JLabel backBtn;
    private javax.swing.JLabel exitBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel loginAs;
    private javax.swing.JTable patient_tbl;
    // End of variables declaration//GEN-END:variables
}
